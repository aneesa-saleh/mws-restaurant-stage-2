"use strict";

var staticCacheName = 'restaurant-reviews-static-v2';
var restaurantImagesCache = 'restaurant-reviews-restaurant-images';
var mapboxTilesCache = 'restaurant-reviews-map-tiles';
var allCaches = [staticCacheName, restaurantImagesCache, mapboxTilesCache];
self.addEventListener('install', function (event) {
  event.waitUntil(caches.open(staticCacheName).then(function (cache) {
    return cache.addAll(['/', '/restaurant.html', '/data/restaurants.json', '/css/restaurant-details.css', '/css/restaurants-list.css', '/js/dbhelper.js', '/js/main.js', '/js/restaurant_info.js', '/img/offline.svg', '/img/offline_wide.svg', 'https://unpkg.com/leaflet@1.3.1/dist/leaflet.css', 'https://unpkg.com/leaflet@1.3.1/dist/leaflet.js', 'https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700', 'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon.png', 'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon-2x.png', 'https://unpkg.com/leaflet@1.3.1/dist/images/marker-shadow.png']);
  }).catch(function (error) {
    return console.log(error);
  }));
});
self.addEventListener('activate', function (event) {
  // delete the old versions of the cache
  event.waitUntil(caches.keys().then(function (cacheNames) {
    return Promise.all(cacheNames.filter(function (cacheName) {
      return cacheName.startsWith('restaurant-reviews-') && !allCaches.includes(cacheName);
    }).map(function (cacheName) {
      return caches.delete(cacheName);
    }));
  }).catch(function (error) {
    return console.log(error);
  }));
});
self.addEventListener('fetch', function (event) {
  var requestUrl = new URL(event.request.url);

  if (requestUrl.origin === location.origin) {
    var restaurantImagePathRegex = /img\/[0-9_\-a-zA-Z]+\.jpg/;

    if (restaurantImagePathRegex.test(requestUrl.pathname)) {
      event.respondWith(serveRestaurantImage(event.request));
      return;
    } // cache should match index.html to /


    if (requestUrl.pathname.startsWith('/index.html')) {
      event.respondWith(caches.match('/').then(function (response) {
        return response || fetch(event.request);
      }));
      return;
    }
  } else if (requestUrl.origin === 'https://api.tiles.mapbox.com') {
    event.respondWith(serveMapboxTiles(event.request));
    return;
  }

  event.respondWith(caches.match(event.request, {
    ignoreSearch: true
  }) // ignore search for /restaurant.html?id=X
  .then(function (response) {
    return response || fetch(event.request);
  }));
});

var serveRestaurantImage = function serveRestaurantImage(request) {
  // image urls have multiple - and _ for orientation, crop, pixel density and screen size
  // the relevant part of the url is before the first -
  var storageUrl = request.url.split('-')[0];
  return caches.open(restaurantImagesCache).then(function (cache) {
    return cache.match(storageUrl).then(function (response) {
      if (response) return response;
      return fetch(request).then(function (networkResponse) {
        cache.put(storageUrl, networkResponse.clone());
        return networkResponse;
      }).catch(function (error) {
        console.log(error); // use of offline images inspired by Salah Hamza's stage 1 project
        // Available at https://github.com/SalahHamza/mws-restaurant-stage-1/blob/master/sw.js

        if (request.url.includes('wide')) return caches.match('/img/offline_wide.svg');
        return caches.match('/img/offline.svg');
      });
    });
  });
};

var serveMapboxTiles = function serveMapboxTiles(request) {
  return caches.open(mapboxTilesCache).then(function (cache) {
    return cache.match(request.url).then(function (response) {
      if (response) return response;
      return fetch(request).then(function (networkResponse) {
        cache.put(request.url, networkResponse.clone());
        return networkResponse;
      });
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
